/*
 * Copyright (C) 2011 Parttimenerd
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package ljbos.filesystem.utils;

import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

/**
 * This class provides methods for hashing, en- and decryption and other useful
 * things to improve security
 * 
 * @author Parttimenerd
 */
public class SecHelper {

    /** used password for encryption and decryption */
    private static String passwd;
    /** used key object */
    private static SecretKeySpec key_spec;
    /** cipher for encryption  */
    private static Cipher ecipher;
    /** cipher for decryption  */
    private static Cipher dcipher;

    /**
     * Creates a password hash
     * @param password password to hash
     * @param salt random byte array
     * @param rounds number of hashings
     * @return password hash
     */
    public static String createPasswordHash(String password, byte[] salt, int rounds) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance("SHA-512");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(SecHelper.class.getName()).log(Level.SEVERE, null, ex);
            return "";
        }
        byte[] strarr = password.getBytes();
        byte[] arr = new byte[salt.length + strarr.length];
        System.arraycopy(salt, 0, arr, 0, salt.length);
        System.arraycopy(strarr, 0, arr, 0, strarr.length);
        long time = System.currentTimeMillis();
        for (int i = 0; i < rounds - 1; i++) {
            arr = md.digest(arr);
        }
        System.out.println(System.currentTimeMillis() - time);
        return bytesToString(arr);
    }

    /**
     * Creates a default password hash
     * @param password password to hash
     * @return rounds:salt:password hash
     */
    public static String createPasswordHash(String password) {
        byte[] salt = createSalt(Constants.SALT_LENGTH);
        return Constants.PASSWD_ROUNDS + ":" + bytesToString(salt) + ":" + createPasswordHash(password, salt, Constants.PASSWD_ROUNDS);
    }

    /**
     * Compares a password with a password hash generated by createPasswordHash(String password)
     * @param str password
     * @param passwd_hash_str generated by createPasswordHash(String password)
     * @return result of the comparison
     */
    public static boolean comparePasswds(String str, String passwd_hash_str) {
        String[] arr = passwd_hash_str.split(":");
        int rounds = Integer.parseInt(arr[0]);
        byte[] salt = hexStringToBytes(arr[1]);
        String hash = createPasswordHash(str, salt, rounds);
        return (hash.equals(arr[2]));
    }

    /**
     * Creates a random filled byte array
     * @param byte_length length of the byte array
     * @return byte array
     */
    public static byte[] createSalt(int byte_length) {
        if (byte_length < 1) {
            return new byte[0];
        }
        Random rand = new Random();
        byte[] arr = new byte[byte_length];
        rand.nextBytes(arr);
        return arr;
    }

    /**
     * Stores the bytes of the byte array in a hexstring
     * @param bytes byte array
     * @return hexstring
     */
    public static String bytesToString(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            String str = Long.toString(b & 0xff, 16);
            sb.append(str.length() < 2 ? "0" + str : str);
        }
        return sb.toString();
    }

    /**
     * Converts the bytes stored in a hexstring in to a byte array
     * @param hexstr hexstring
     * @return byte array
     */
    public static byte[] hexStringToBytes(String hexstr) {
        char[] chars = hexstr.toCharArray();
        byte[] bytes = new byte[chars.length / 2];
        for (int i = 0; i < chars.length; i += 2) {
            bytes[i / 2] = (byte) Long.parseLong(String.valueOf(chars[i]) + String.valueOf(chars[i + 1]), 16);
        }
        return bytes;
    }

    /**
     * Changes the password
     * @param old old password, if no password is stored, null
     * @param new_one new password
     * @return true, if old == stored or stored == null
     */
    public static boolean changePasswd(String old, String new_one) {
        if (passwd != null || !checkPasswd(new_one)) {
            if (!(old == null ? passwd == null : old.equals(passwd) && checkPasswd(new_one))) {
                return false;
            }
        }
        passwd = new_one;
        key_spec = new SecretKeySpec(passwd.getBytes(), "AES");
        try {
            ecipher = Cipher.getInstance("AES");
            ecipher.init(Cipher.ENCRYPT_MODE, key_spec);
            dcipher = Cipher.getInstance("AES");
            dcipher.init(Cipher.DECRYPT_MODE, key_spec);
            return true;
        } catch (InvalidKeyException ex) {
            Logger.getLogger(SecHelper.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(SecHelper.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(SecHelper.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    /**
     * Checks the length of the password
     * @param str password
     * @return result
     */
    public static boolean checkPasswd(String str) {
        return str.length() % (Constants.AES_MODE / 8) == 0;
    }

    /**
     * Encrypts the data
     * @param data data to encrypt
     * @return encrypted data
     * @throws ljbos.filesystem.utils.SecHelper.NoPasswdStoredException when no password is stored
     */
    public static byte[] encrypt(byte[] data) throws NoPasswdStoredException {
        try {
            if (passwd == null) {
                throw new NoPasswdStoredException();
            }
            return ecipher.doFinal(data);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(SecHelper.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(SecHelper.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    /**
     * Decrypts the data
     * @param data data to decrypt
     * @return decrypted data
     * @throws ljbos.filesystem.utils.SecHelper.NoPasswdStoredException when no password is stored
     */
    public static byte[] decrypt(byte[] data) throws NoPasswdStoredException {
        try {
            if (passwd == null) {
                throw new NoPasswdStoredException();
            }
            return dcipher.doFinal(data);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(SecHelper.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(SecHelper.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    /**
     * Method to test functionalites
     * @param args not used
     */
    public static void main(String[] args) {
    }

    public static class NoPasswdStoredException extends Exception {

        @Override
        public String getMessage() {
            return "No password stored...";
        }
    }
}
